<html lang="en">
  <!DOCTYPE html>
  <head>
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0"
    />
    <title>Tạo lịch học trong thời khóa biểu</title>
    <link
      rel="stylesheet"
      href="/css/timetableindex.css"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css"
    />
  </head>
  <body>
    <!-- <div class="container"> -->
    <img
      src="/image/cover.png"
      alt=""
      class="container-image"
    />
    <!-- </div> -->

    <div class="container-menu">
      <nav class="menu">
        <ul>
          <li><a href="/homepage">Trang chủ</a></li>
          <li class="right"><a href="/login">Đăng nhập</a></li>
        </ul>
      </nav>
    </div>

    <div class="container">
      <!-- <div class="form-group">
        <label
          for="classes"
          class="form-label"
          >Tên lớp:</label
        >
        <input
          type="text"
          name="classes"
          class="input-field"
        />
      </div> -->
      <div class="form-group">
        <label
          for="room"
          class="form-label"
          >Số phòng học:</label
        >
        <select
          name="room"
          class="input-field"
          required
        >
          <option value="">Chọn số phòng học</option>
        </select>
      </div>
      <div class="form-group">
        <label
          for="timestart"
          class="form-label"
          >Thời gian bắt đầu:</label
        >
        <input
          type="text"
          name="timestart"
          class="input-field flatpickr"
          data-enable-time="false"
          data-date-format="Y-m-d H:i:S"
        />
      </div>
      <div class="form-group">
        <label
          for="timeend"
          class="form-label"
          >Thời gian kết thúc:</label
        >
        <input
          type="text"
          name="timeend"
          class="input-field flatpickr"
          data-enable-time="false"
          data-date-format="Y-m-d H:i:S"
        />
      </div>
      <div class="form-group">
        <label
          for="department"
          class="form-label"
          >Khoa:</label
        >
        <select
          name="department"
          class="input-field"
          id="departmentSelect"
        >
          <option value="">Chọn khoa</option>
        </select>
      </div>
      <div class="form-group">
        <label
          for="lecturer"
          class="form-label"
          >Giáo viên:</label
        >
        <select
          name="id_lecturer"
          class="input-field"
          id="lecturerSelect"
        >
          <option value="">Chọn giáo viên</option>
        </select>
      </div>
      <div class="form-group">
        <label
          for="staff"
          class="form-label"
          >Nhân viên:</label
        >
        <select
          name="id_staff"
          class="input-field"
          id="staffSelect"
          required
        >
          <option value="">Chọn nhân viên</option>
        </select>
      </div>

      <button
        type="button"
        id="customButton"
        class="btn btn-submit"
      >
        Go
      </button>
      <button
        type="button"
        id="emptyRoomButton"
        class="btn btn-submit"
      >
        Tìm phòng trống
      </button>

      <div
        id="timetable-columns"
        style="display: flex; overflow-x: auto"
      ></div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script>
      flatpickr('.flatpickr', {});
      async function populateTeachers() {
        try {
          console.log('populateTeachers');
          const response = await fetch('/lecturelistjson'); // Đường dẫn xử lý query
          const teachers = await response.json();

          const select = document.querySelector('select[name="id_lecturer"]');
          select.innerHTML = '<option value="">Chọn giáo viên</option>';
          teachers.data.forEach((teacher) => {
            const option = document.createElement('option');
            option.value = teacher.id;
            option.textContent = teacher.firstname + ' ' + teacher.lastname;
            select.appendChild(option);
          });
        } catch (error) {
          console.log(error);
        }
      }
      populateTeachers();

      async function populateRooms() {
        try {
          const response = await fetch('/roomlist'); // Đường dẫn xử lý query
          const rooms = await response.json();

          const select = document.querySelector('select[name="room"]');
          select.innerHTML = '<option value="">Chọn số phòng học</option>';
          rooms.forEach((room) => {
            const option = document.createElement('option');
            option.value = room.id;
            option.textContent = room.name;
            select.appendChild(option);
          });
        } catch (error) {
          console.log(error);
        }
      }

      // Gọi hàm populateRooms để điền dữ liệu vào dropdown số phòng học khi trang được tải
      populateRooms();

      async function populateStaff() {
        try {
          const response = await fetch('/staffread');
          const staffData = await response.json();

          const staffSelect = document.getElementById('staffSelect');
          staffSelect.innerHTML = '<option value="">Chọn nhân viên</option>';

          staffData.forEach((staff) => {
            const option = document.createElement('option');
            option.value = staff.id;
            option.textContent = staff.firstname + ' ' + staff.lastname;
            staffSelect.appendChild(option);
          });
        } catch (error) {
          console.error(error);
        }
      }

      populateStaff();

      async function populateDepartments() {
        try {
          const response = await fetch('/departmentlist'); // Đường dẫn xử lý query
          const departments = await response.json();

          const select = document.getElementById('departmentSelect');
          select.innerHTML = '<option value="">Chọn khoa</option>';
          departments.forEach((department) => {
            const option = document.createElement('option');
            // option.value = department.id;
            option.textContent = department;
            // option.value=department;
            select.appendChild(option);
          });
        } catch (error) {
          console.log(error);
        }
      }

      // Gọi hàm populateDepartments để điền dữ liệu vào dropdown "Khoa" khi trang được tải
      populateDepartments();

      const customButton = document.getElementById('customButton');

      customButton.addEventListener('click', async () => {
        // Thực hiện các thao tác khi nút được nhấn
        console.log('Nút đã được nhấn');
        const timestart = document.querySelector('input[name="timestart"]').value;
        const timeend = document.querySelector('input[name="timeend"]').value;
        const select = document.querySelector('select[name="id_lecturer"]');
        const select2 = document.querySelector('select[name="id_staff"]');
        const select3 = document.querySelector('select[name="room"]');
        const selectedLecturer = select.value;
        const selectedStaff = select2.value;
        const selectedRoom = select3.value;
        console.log(selectedLecturer);
        console.log(selectedStaff);
        console.log(selectedRoom);

        // Gửi yêu cầu GET với tham số timestart và timeend lên server
        const response = await fetch(
          `/timetableindexget?timestart=${timestart}&timeend=${timeend}&id_lecturer=${selectedLecturer}&id_staff=${selectedStaff}&room=${selectedRoom}`,
          // `/timetableindexget?timestart=${timestart}&timeend=${timeend}`,
        );
        const data = await response.json();
        console.log(data);

        // Hiển thị kết quả trả về vào #timetable-columns
        const timetableColumns = document.getElementById('timetable-columns');
        timetableColumns.innerHTML = ''; // Xóa nội dung cũ trước khi thêm mới
        const daysOfWeek = [
          'Chủ Nhật',
          'Thứ Hai',
          'Thứ Ba',
          'Thứ Tư',
          'Thứ Năm',
          'Thứ Sáu',
          'Thứ Bảy',
        ];
        const timetableByDate = new Map();
        data.results.forEach((item) => {
          const dateTimeStart = new Date(item.timestart);
          const date = dateTimeStart.toDateString(); // Lấy ngày trong chuỗi định dạng

          // Kiểm tra xem ngày đã tồn tại trong Map chưa
          if (!timetableByDate.has(date)) {
            timetableByDate.set(date, []);
          }

          timetableByDate.get(date).push(item);
        });

        // Thay đổi cách tạo dòng cho từng ngày
        timetableByDate.forEach((items, date) => {
          // Tạo dòng cho từng ngày
          const row = document.createElement('div');
          row.className = 'timetable-row'; // Tạo một lớp CSS mới cho dòng

          // Hiển thị ngày
          const columnHeader = document.createElement('div');
          columnHeader.className = 'row-header';
          columnHeader.textContent = date;
          row.appendChild(columnHeader);

          // Hiển thị thông tin lịch học cho từng môn
          items.forEach((item) => {
            console.log(item);
            const entry = document.createElement('div');
            entry.className = 'timetable-entry';
            entry.innerHTML = `Bắt đầu: <br/> 
                              ${item.timestart}<br/>
                              Kết thúc:<br/> 
                              ${item.timeend}<br/>
                              Môn: ${item.subject}<br/>
                              Lớp: ${item.classes}<br/>
                              Phòng: ${item.room}<br/>
                              GV: ${item.lecturer}<br/>
                              NV: ${item.staff}<br/>`;
            row.appendChild(entry);
          });

          timetableColumns.appendChild(row);
        });
      });

      document.addEventListener('DOMContentLoaded', () => {
        // Tạo một hàm để gọi thao tác khi trang tải xong
        async function loadInitialData() {
          // Lấy các phần tử cần thao tác
          const timestartInput = document.querySelector('input[name="timestart"]');
          const timeendInput = document.querySelector('input[name="timeend"]');
          // const lecturerSelect = document.querySelector('select[name="id_lecturer"]');
          const customButton = document.getElementById('customButton');

          // Mô phỏng việc điền dữ liệu vào các phần tử trang
          timestartInput.value = '2023-09-01'; // Thay đổi giá trị mặc định cho timestart
          timeendInput.value = '2023-09-17'; // Thay đổi giá trị mặc định cho timeend
          // lecturerSelect.value = '1'; // Chọn một giáo viên mặc định (điều này phải có giá trị trong dropdown)

          // Tạo sự kiện click tự động cho nút "Go" để mô phỏng việc nhấn nút
          const clickEvent = new MouseEvent('click', {
            bubbles: true,
            cancelable: true,
            view: window,
          });
          customButton.dispatchEvent(clickEvent);
        }

        // Gọi hàm loadInitialData khi trang được tải
        loadInitialData();

        const customButton = document.getElementById('customButton');
        const emptyRoomButton = document.getElementById('emptyRoomButton');

        // ...

        emptyRoomButton.addEventListener('click', () => {
          // Chuyển hướng đến /emptyroom khi nút "Tìm phòng trống" được nhấn
          window.location.href = '/emptyroom';
        });
      });
    </script>
  </body>
</html>
